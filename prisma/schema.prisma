// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String        @id @default(cuid())
  name         String?
  username     String?       @unique
  email        String?       @unique
  image        String?
  credits      Int           @default(5)
  accounts     Account[]
  sessions     Session[]
  Icon         Icon[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  comments     Comment[]
  imageLikes   ImageLike[]
  commentLikes CommentLike[]
  collections  Collection[]
}

model Icon {
  id          String               @id @default(cuid())
  title       String?              @default("Untitled")
  prompt      String?
  model       String?              @default("dall-e")
  stylePreset String?              @default("none")
  user        User?                @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime             @default(now())
  comments    Comment[]
  likes       ImageLike[]
  collections CollectionHasImage[]
  private     Boolean?             @default(false)

  @@index([userId])
}

model ImageLike {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  image   Icon   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId  String
  imageId String

  @@id([userId, imageId])
}

model Comment {
  id        String        @id @default(cuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  image     Icon          @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("ParentChild")
  parentId  String?
  likes     CommentLike[]
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model Collection {
  id          String               @id @default(cuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  title       String
  description String?
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  images      CollectionHasImage[]

  @@index([userId])
}

model CollectionHasImage {
  id           String      @id @default(cuid())
  collectionId String
  imageId      String
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  image        Icon?       @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([collectionId, imageId])
  @@index([collectionId])
  @@index([imageId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
